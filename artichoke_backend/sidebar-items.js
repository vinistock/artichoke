initSidebarItems({"fn":[["interpreter","Create and initialize an [`Artichoke`] interpreter."],["interpreter_with_config","Create and initialize an [`Artichoke`] interpreter with build metadata."]],"macro":[["mrb_get_args","Extract [`sys::mrb_value`]s from a [`sys::mrb_state`] to adapt a C entrypoint to a Rust implementation of a Ruby function."],["unwrap_interpreter","Extract an `Artichoke` instance from the userdata on a [`sys::mrb_state`]."]],"mod":[["block",""],["class",""],["class_registry",""],["convert",""],["core","A \"prelude\" for users of the `artichoke-core` crate."],["def",""],["exception",""],["exception_handler",""],["extn",""],["ffi","Functions for interacting directly with mruby structs from [`sys`]."],["fs","Virtual filesystem."],["gc",""],["method",""],["module",""],["module_registry",""],["prelude","A \"prelude\" for users of the `artichoke-backend` crate."],["release_metadata",""],["state",""],["string","Utilities for working with Ruby `String`s."],["sys","Rust bindings for mruby, customized for Artichoke."],["types",""],["value",""]],"struct":[["Artichoke","Interpreter instance."],["Guard","Interpreter guard that prepares an [`Artichoke`] to re-enter an FFI boundary."]]});